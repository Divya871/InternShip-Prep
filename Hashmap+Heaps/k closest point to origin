class Solution {
public:
    class comp{
        public:
    bool operator() (const vector<int>&a,const vector<int>&b) const
    {
        int d1=a[0]*a[0]+a[1]*a[1];
        int d2=b[0]*b[0]+b[1]*b[1];
        
        return d2>d1;
    }};
    
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<vector<int>,vector<vector<int>>,comp>pq;
        
        for(vector<int>&p:points)
        {
            pq.push(p);
            if(pq.size()>k){pq.pop();}
        }
        
        vector<vector<int>>ans;
        while(pq.size()!=0)
        {
            ans.push_back(pq.top());pq.pop();
        }
        return ans;
    }
};


===without comparator===

vector<vector<int>> kClosest(vector<vector<int>> &points, int k)
{
    //{d,x,y}
    priority_queue<vector<int>> pq; // maxPQ

    for (vector<int> &p : points)
    {
        int x = p[0];
        int y = p[1];
        pq.push({x * x + y * y, x, y});
        if (pq.size() > k)
            pq.pop();
    }

    vector<vector<int>> ans;
    while (pq.size() != 0)
    {
        vector<int> p = pq.top();
        pq.pop();
        int x = p[1];
        int y = p[2];

        ans.push_back({x, y});
    }

    return ans;
}
