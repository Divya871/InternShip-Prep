class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
          int n = grid.size(),m=n;
         
 priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;


        vector<vector<int>>dir {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        vector<vector<bool>> vis(n, vector<bool>(m, false));

        pq.push({0,0,0});
        vis[0][0] = true;

        int minHeight = 0, time = 0;

        while (pq.size() != 0) {
            vector<int> rp = pq.top(); pq.pop();
      
        int i = rp[1], j = rp[2];
            int height = grid[i][j];

            time += max(0, height - minHeight);
            if (i == n - 1 && j == m - 1)
                break;

            minHeight = max(minHeight, height);

           for (int d = 0; d < 4; d++) {
                int r = i + dir[d][0];
                int c = j + dir[d][1];

                if (r >= 0 && c >= 0 && r < n && c < m && !vis[r][c]) {
                    vis[r][c] = true;
                     pq.push({grid[r][c], r, c});
                }
            }
        }

        return time;
    }
};
