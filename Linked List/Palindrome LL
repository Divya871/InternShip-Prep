class Solution {
public:
   
    ListNode*midNode(ListNode*head)
    {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    
    ListNode*reverse(ListNode*head)
    {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        ListNode*prev=NULL;
        ListNode*curr=head;
        ListNode*next;
        while(curr!=NULL)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        head=prev;
        return head;
    }
  
    bool isPalindrome(ListNode* head) {
     
      ListNode*mid=midNode(head);
        ListNode*nhead=mid->next;
        mid->next=NULL;
        
        nhead=reverse(nhead);
        ListNode*c1=head;
        ListNode*c2=nhead;
        while(c1!=NULL && c2!=NULL)
        {
            if(c1->val!=c2->val){return false;}
            c1=c1->next;
            c2=c2->next;
        }
        return true;}
};

