
class Solution{
  public:
    
    Node *midNode(Node *head)
{
    if (head == nullptr || head->next == nullptr)
        return head;

   Node *slow = head;
    Node *fast = head;
    while (fast->next != nullptr && fast->next->next != nullptr)
    {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}
Node *mergeTwoLists(Node *l1,Node *l2)
{
    if (l1 == nullptr || l2 == nullptr)
        return l1 != nullptr ? l1 : l2;

    Node *dummy = new Node(-1);
    Node *prev = dummy;

   Node *c1 = l1;
    Node *c2 = l2;

    while (c1 != nullptr && c2 != nullptr)
    {
        if (c1->data <= c2->data)
        {
            prev->next = c1;
            c1 = c1->next;
        }
        else
        {
            prev->next = c2;
            c2 = c2->next;
        }

        prev = prev->next;
    }

    prev->next = c1 != nullptr ? c1 : c2;

    Node *h = dummy->next;
    dummy->next = nullptr;
    delete dummy;
    return h;
}
    
    Node* mergeSort(Node* head) {
        // your code here
     {if(head==NULL || head->next==NULL){return head;}
   Node*mid=midNode(head);
Node*nhead=mid->next;
        mid->next=NULL;
        
        return mergeTwoLists(mergeSort(head),mergeSort(nhead));}}
     
};
