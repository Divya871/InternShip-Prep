====Recursive Code====


int MatrixChainOrder(int p[], int i, int j)
{
    if (i>= j)
        return 0;
   
    int min = INT_MAX;
    

    for (int k = i; k <= j-1; k++) 
    {
        int tempans = MatrixChainOrder(p, i, k)
                + MatrixChainOrder(p, k + 1, j)
                + p[i - 1] * p[k] * p[j];

        if (tempans < min)
            min = tempans;
    }

    
    return min;
}

// Driver Code
int main()
{
    int arr[] = { 1, 2, 3, 4, 3 };
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Minimum number of multiplications is "
         << MatrixChainOrder(arr, 1, n - 1);
}

====Memo COde====
int matrixChainMemoised(int* p, int i, int j,vector<vector<int>>&dp)
{
    if (i >= j) 
    {
        return 0;
    }
    if (dp[i][j] != -1) 
    {
        return dp[i][j];
    }
    int min = INT_MAX;
    for (int k = i; k <=j-1; k++) 
    {
        int tempans = 
             matrixChainMemoised(p, i, k,dp)
                     + matrixChainMemoised(p, k + 1, j,dp)
                       + p[i - 1] * p[k] * p[j];
    
    if(tempans<min){min=tempans;}}
    return dp[i][j]=min;
}
    int matrixMultiplication(int N, int p[])
    {
        // code here
    
        vector<vector<int>>dp(N+1,vector<int>(N+1,-1));
        return matrixChainMemoised(p,1,N-1,dp);
    }
