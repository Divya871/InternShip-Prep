====Recursive Code====


int MatrixChainOrder(int p[], int i, int j)
{
    if (i>= j)
        return 0;
   
    int min = INT_MAX;
    

    for (int k = i; k <= j-1; k++) 
    {
        int tempans = MatrixChainOrder(p, i, k)
                + MatrixChainOrder(p, k + 1, j)
                + p[i - 1] * p[k] * p[j];

        if (tempans < min)
            min = tempans;
    }

    
    return min;
}

// Driver Code
int main()
{
    int arr[] = { 1, 2, 3, 4, 3 };
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Minimum number of multiplications is "
         << MatrixChainOrder(arr, 1, n - 1);
}

====Memo COde====
class Solution{
public:
int dp[100][100];
int matrixChainMemoised(int* p, int i, int j)
{
    if (i >= j) 
    {
        return 0;
    }
    if (dp[i][j] != -1) 
    {
        return dp[i][j];
    }
    dp[i][j] = INT_MAX;
    for (int k = i; k <=j-1; k++) 
    {
        dp[i][j] = min(
            dp[i][j], matrixChainMemoised(p, i, k)
                     + matrixChainMemoised(p, k + 1, j)
                       + p[i - 1] * p[k] * p[j]);
    }
    return dp[i][j];
}
    int matrixMultiplication(int N, int p[])
    {
        // code here
    
memset(dp, -1, sizeof dp);
        return matrixChainMemoised(p,1,N-1);
    }
};

