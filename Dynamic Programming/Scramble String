TC=O(N^2)


int one(string &s,string &t,int N,int M,vector<vector<int>>&dp)
     { for(int n=0;n<=N;n++)
     {
         for(int m=0;m<=M;m++)
         {
         if(n==0 || m==0)
         {
             dp[n][m]=(n==0)?m:n;
             continue;
         }
         
         
         int insert=dp[n][m-1];
         int del=dp[n-1][m];
         int replace=dp[n-1][m-1];
         
         if(s[n-1]==t[m-1])
         {
             dp[n][m]=replace;
         }
         else
         {
         dp[n][m]=min(min(insert,del),replace)+1;
     }}}
         return dp[N][M];}

    bool isOneEditDistance(string &s, string &t) {
        // write your code here
        int n=s.length();
        int m=t.length();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        int ans=one(s,t,n,m,dp);
        if(ans==1)
        {
            return true;
        }
        else{
            return false;
        }

    }
};


TC=O(N),SC=O(1)
bool isOneEditDistance(string &s, string &t) {
      
    int m = s.length(), n = t.length();
   if (abs(m - n) > 1)
        return false;
  
    int count = 0; 
  
    int i = 0, j = 0;
    while (i < m && j < n)
    {
         if (s[i] != t[j])
        {
            if (count == 1)
                return false;
  
            if (m > n)
                i++;
            else if (m< n)
                j++;
            else
            {
                i++;
                j++;
            }
              
         count++;
        }
  
        else 
        {
            i++;
            j++;
        }
    }
  
     if (i < m || j < n)
        count++;
  
    return count==1;

    }
