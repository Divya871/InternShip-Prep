 ============================MEMO CODE============TC=O(N),SC=O(N)
 
 int mini(int n,vector<int>&cost,vector<int>&dp)
    {
      if(n<=1){return dp[n]=cost[n];}
      if(dp[n]!=-1){return dp[n];}
      int minCost=min(mini(n-1,cost,dp),mini(n-2,cost,dp));
      return dp[n]=minCost+(n==cost.size()?0:cost[n]);
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        vector<int>dp(n+1,-1);
        return mini(n,cost,dp);
    }
    
    =====================TABU CODE====================TC=O(N),SC=O(N)
     int mini(int N,vector<int>&cost,vector<int>&dp)
    {for(int n=0;n<=N;n++){
      if(n<=1){dp[n]=cost[n];continue;}
    
      int minCost=min(dp[n-1],dp[n-2]);
     dp[n]=minCost+(n==cost.size()?0:cost[n]);}
     return dp[N];
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        vector<int>dp(n+1);
        return mini(n,cost,dp);
    }
    
    ======Two Pointer Code========TC=O(N),SC=O(1)
    
     int minCostClimbingStairs(vector<int>& cost) {
       int a=cost[0],b=cost[1];
      for(int i=2;i<cost.size();i++)
      {
        int minCost=min(a,b)+cost[i];
        a=b;
        b=minCost;
      }
      return min(a,b);
    }
