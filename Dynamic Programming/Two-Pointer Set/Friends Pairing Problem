TC=O(N),
 long mod = (int) 1e9 + 7;

    long countFriendsPairings_memo(int n, vector<long>&dp) {

        if (n <= 1) {
            return dp[n] = 1;
        }

        if (dp[n] != 0)
            return dp[n];

        long single = countFriendsPairings_memo(n - 1, dp);
        long pairup = countFriendsPairings_memo(n - 2, dp) * (n - 1);

        return dp[n] = (single % mod + pairup % mod) % mod;
    }

    int countFriendsPairings(int n) 
    { 
        // code here
        
         vector<long>dp(n+1);
        return countFriendsPairings_memo(n, dp);
        
        
    }
    ========TABU CODE=====================
    
     long mod = (int) 1e9 + 7;

    long countFriendsPairings_dp(int N, vector<long>&dp) {
  for (int n = 0; n <= N; n++)
        {if (n <= 1) {
             dp[n] = 1;
             continue;
        }

        
        long single = dp[n-1];
        long pairup = dp[n-2] * (n - 1);

        dp[n] = (single % mod + pairup % mod) % mod;
    }
    return dp[N];}

    int countFriendsPairings(int n) 
    { 
        // code here
        
         vector<long>dp(n+1);
        return countFriendsPairings_dp(n, dp);
    }
};    


=====OPTI CODE======
 int countFriendsPairings(int n) 
    { 
        // code here
       
       long a=1;
      long b=1;long sum;
       if(n<=1){return n;}
       
       for(int i=2;i<=n;i++)
       {
           sum=(b+a*(i-1))%mod;
           a=b;
           b=sum;
       }
       return sum;
        
    }
        
