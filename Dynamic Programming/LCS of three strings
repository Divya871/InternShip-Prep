===RECURSIVE CODE====

int dp[100][100][100];

int LCSof3(string X,string Y,string Z,int i, int j,int k)
{ memset(dp, -1,sizeof(dp));
    if(i==-1||j==-1||k==-1)
        return 0;
    if(dp[i][j][k]!=-1)
        return dp[i][j][k];
     
    if(X[i]==Y[j] && Y[j]==Z[k])
        return dp[i][j][k] = 1+LCSof3(X,Y,Z,i-1,j-1,k-1);
    else
        return dp[i][j][k] = max(max(LCSof3(X,Y,Z,i-1,j,k),
                            LCSof3(X,Y,Z,i,j-1,k)),LCSof3(X,Y,Z,i,j,k-1));
}
 
    
    return L[m][n][o];
}

===DP CODE====

int LCSof3( string X, string Y, string Z, int m,
                               int n, int o){
 int L[m+1][n+1][o+1];
 
    for (int i=0; i<=m; i++)
    {
        for (int j=0; j<=n; j++)
        {
            for (int k=0; k<=o; k++)
            {
                if (i == 0 || j == 0||k==0)
                    L[i][j][k] = 0;
 
                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1])
                    L[i][j][k] = L[i-1][j-1][k-1] + 1;
 
                else
                    L[i][j][k] = max(max(L[i-1][j][k],
                                         L[i][j-1][k]),
                                     L[i][j][k-1]);
            }
        }
    }
 
    
    return L[m][n][o];
}
