TC=O(N),SC=O(1)
#include<iostream>
#include<vector>
using namespace std;

struct Node
{
    int data;
    Node *left, *right;
};
  
struct Node* getNode(int data)
{
    struct Node *newNode = new Node;
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}
  
 /* bool RootToNodePath(Node *root, vector<int>& arr, int x)
{     if (root==NULL)
        {return false;}
      
   
    arr.push_back(root->data);    
      
    
    if (root->data == x)    
       { return true;}
   
    if (hasPath(root->left, arr, x) ||
        hasPath(root->right, arr, x))
        return true;
    
    arr.pop_back();
    return false;            
}*/
  
  bool NodeToRootPath(Node *root, vector<int>& arr, int x)
{     if (root==NULL)
        {return false;}
      
   
      if(root->data == x)    
       { return true;arr.push_back(root->data); }
   
    bool res= hasPath(root->left, arr, x) || hasPath(root->right, arr, x);
        
        if(res)  {arr.push_back(root->data);return true;}
     return false; 
}
  void printPath(Node *root, int x)
{
   
    vector<int> arr;
    if (hasPath(root, arr, x))
    { 
        for (int i=0; i<arr.size(); i++) 
          cout<<arr[i]<<"->";
       
    }
    else
        cout << "No Path";
}
  
int main()
{
   
    struct Node *root = getNode(1);
    root->left = getNode(2);
    root->right = getNode(3);
    root->left->left = getNode(4);
    root->left->right = getNode(5);
    root->right->left = getNode(6);
    root->right->right = getNode(7);
          
    int x = 5;
    printPath(root, x);
    return 0;
} 
