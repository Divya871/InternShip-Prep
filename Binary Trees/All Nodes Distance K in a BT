 
 
 TC=O(N),SC=O(N)
 void printKDown(TreeNode* node, TreeNode* block, int depth, vector<int> &ans) {
        if (node == NULL || depth < 0 || node == block)
            return;

        if (depth == 0) {
            ans.push_back(node->val);
            return;
        }

        printKDown(node->left, block, depth - 1, ans);
        printKDown(node->right, block, depth - 1, ans);
    }
    
    
    
    bool rootToNodePath(TreeNode* node, TreeNode* data, vector<TreeNode*> &ans){
        if(node==NULL){
            return false;
        }
        if(node==data){
            ans.push_back(node);
            return true;
        }
        bool res=rootToNodePath(node->left, data, ans)||rootToNodePath(node->right, data, ans);
        if(res)
            ans.push_back(node);
        return res;
    }
    
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        vector<TreeNode*> list;
        rootToNodePath(root, target, list);

        vector<int> ans;
        TreeNode* blockNode = NULL;

        for (int i = 0; i < list.size(); i++) {
            printKDown( list[i], blockNode, K - i, ans);
            blockNode = list[i];
        }
        return ans;
    }
