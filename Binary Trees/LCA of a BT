TC=O(N)

bool rootToPath(TreeNode*node,TreeNode*data,vector<TreeNode*>&ans)
     {
         if(node==NULL){return false ;}
         if(node==data){ans.push_back(node);return true;}
         
         bool res=rootToPath(node->left,data,ans)|| rootToPath(node->right,data,ans);
         if(res)
         {
             ans.push_back(node);
         }
         return res;
     }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        vector<TreeNode*>list1;
        vector<TreeNode*>list2;
    
        rootToPath(root,p,list1);
        rootToPath(root,q,list2);
        TreeNode*LCA=NULL;
        int i=list1.size()-1;int j=list2.size()-1;
        while(i>=0 && j>=0)
        {
            if(list1[i]!=list2[j])
            {break;}
            LCA=list1[i];
            i--;j--;
            
        }
        return LCA;
         }
         
         
=======================================ABOVE SOLUTION REQUIRE MORE TIME PLUS EXTRA SPACE FOR BOTH ARRAYS================

         
  TreeNode*LCAUtil(TreeNode*root,int p,int q,bool &v1,bool &v2)
  {
    if(root==NULL){return NULL;}
    if(root->val==p)
    {
      v1=true;
      return root;
    }
    if(root->val==q)
    {
      v2=true;
      return root;
    }
    
   TreeNode*left_lca=LCAUtil(root->left,p,q,v1,v2);
   TreeNode*right_lca=LCAUtil(root->right,p,q,v1,v2);
    
    if(left_lca && right_lca){return root;}
    
    return (left_lca!=NULL)?left_lca:right_lca;
  }
  
  
  bool find(TreeNode*root,int data)
{ 
  if(root==NULL){return false;}
  if(root->val==data){return true;}
  return find(root->left,data) || find(root->right,data);}
  
bool rootToPath(TreeNode*node,TreeNode*data,vector<TreeNode*>&ans)
     {
         if(node==NULL){return false ;}
         if(node==data){ans.push_back(node);return true;}
         
         bool res=rootToPath(node->left,data,ans)|| rootToPath(node->right,data,ans);
         if(res)
         {
             ans.push_back(node);
         }
         return res;
     }
  
  
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
       bool v1=false;
       bool v2=false;
       TreeNode*lca=LCAUtil(root,p->val,q->val,v1,v2);
       
      if(v1 && v2 || v1 && find(lca,q->val) || v2 && find(lca,p->val))
      {return lca;}
      return NULL;
         }};
