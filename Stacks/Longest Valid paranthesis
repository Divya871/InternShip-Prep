  TC=O(N^2),SC=O(N)
  
  ->A Simple Approach is to find all the substrings of given string.
  ->For every string, check if it is a valid string or not. 
  ->If valid and length is more than maximum length so far, then update maximum length. 
  ->We can check whether a substring is valid or not in linear time using a stack.
  
  
  TC=O(N),SC=O(N)
  
  int longestValidParentheses(string s) {
       stack<int>st;st.push(-1);
        int len=0;
       for(int i=0;i<s.length();i++)
       {
           if(st.top()!=-1 && s[st.top()]=='(' && s[i]==')')
           {st.pop();
           len=max(len,i-st.top());
           }
           else 
           {st.push(i);}
       }
    
    return len;}
    
    
    TC=O(N),SC=O(1)
    
->The idea to solve this problem is to traverse the string on and keep track of the count of open parentheses and close parentheses with the help of two counters left and right respectively.
->First, the string is traversed from the left towards the right 
===========for every “(” encountered, the left counter is incremented by 1 .
===========for every “)” the right counter is incremented by 1.
->Whenever the left becomes equal to right, the length of the current valid string is calculated 
->if it greater than the current longest substring, then value of required longest substring is updated with current string length.
->If the right counter becomes greater than the left counter, then the set of parentheses has become invalid and hence the left and right counters are set to 0.
->After the above process, the string is similarly traversed from right to left and similar procedure is applied.
    
     //left=opening bracket
  //right=closing bracket
  
    int longestValidParentheses(string s) {
        int n=s.length();
       int left = 0, right = 0, maxlength = 0;
 
     for (int i = 0; i < n; i++)
    {
        if (s[i] == '(')
            left++;
        else
            right++;
 
        if (left == right)
            maxlength = max(maxlength, 2 * right);
 
       
        else if (right > left)
            left = right = 0;
    }
 
    left = right = 0;
 
  
    for (int i = n - 1; i >= 0; i--) {
 
        if (s[i] == '(')
            left++;
        else
            right++;
 
       
        if (left == right)
            maxlength = max(maxlength, 2 * left);
 
        else if (left > right)
            left = right = 0;
    }
    return maxlength;
}
    
    
