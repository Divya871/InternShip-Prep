int dfs(vector<vector<int>>&v,int src,vector<bool>&vis)
{
    vis[src]=true;
    int ans=1;//size of component with curr node as src
    for(int i=0;i<v[src].size();++i)
    {
        if(!vis[v[src][i]])
        {ans += dfs(v,v[src][i],vis);}
    }
    return ans;
}


long roadsAndLibraries(int n, int c_lib, int c_road, vector<vector<int>> cities) {
    
    //building of graph from matrix
vector<vector<int>>v(n+1);
for(int i=0;i<cities.size();++i)
{
    v[cities[i][0]].push_back(cities[i][1]);
    v[cities[i][1]].push_back(cities[i][0]);
}

//count size of components
vector<int>comps;//stores size of each component
vector<bool>vis(n+1,false);

for(int i=1;i<=n;++i)
{
    if(v[i].size()>0 && !vis[i])
    {
        comps.push_back(dfs(v,i,vis));
    }
    
    else if(v[i].size()==0)//for single city
     {comps.push_back(1);}
    }
    
    //question asked it
    long long int ans=0;
    for(int i=0;i<comps.size();++i)
    {   //agar libraray_cost is less than road_cost, fir to har jgh lib bna de simple
        //otherwise connected component me dekh le kitne nodes hai, ek library bnegi + (nodes-1)roads
        
        ans+=min((comps[i]-1)*c_road+c_lib,comps[i] * c_lib);
    }

return ans;

}
